```
import numpy as np
import matplotlib.pyplot as plt
import scipy as scipy


def zad_2():
    kp = 3
    T = 2
    A = -(1/T)
    B = kp/T
    C = 1
    D = 0

    g1 = scipy.signal.lti([kp],[T,1])
    t, y = scipy.signal.step(g1)
    plt.plot(t, y, 'bs', label='czasowa')

    g2 = scipy.signal.StateSpace(A,B,C,D)
    t, y = scipy.signal.step(g2)
    plt.plot(t, y, 'g^', label='zmienne stanu')

    #2.6
    def model(x, t):
        kp = 3
        T = 2
        u = 1
        dydt = (-x + kp*u)/T
        return dydt

    y0 = 0
    t = np.linspace(0, 16)
    y = scipy.odeint(model, y0, t)

    plt.plot(t, y, 'r--', label='całka')
    plt.xlabel('time')
    plt.ylabel('y(t)')
    plt.legend()
    plt.show()


def zad_3():
    R = 12
    L = 1
    C = 0.0001

    G1 = scipy.signal.TransferFunction([1,0],[L,R,1/C])
    print(G1)

    t, y = scipy.signal.step(G1)
    plt.plot(t, y, 'g--')

    t1, y1 = scipy.signal.impulse(G1)
    plt.plot(t1, y1,'r--')

    plt.show()

    #3.2
    A = np.array([[0,1],[-1/(L*C),-R/L]])
    B = np.array([[0],[1/L]])
    C = np.array([0,1])
    D = 0

    G2 = scipy.signal.StateSpace(A,B,C,D)
    t, y = scipy.signal.step(G2)
    plt.plot(t, y,'g--',label='skok')

    t, y = scipy.signal.impulse(G2)
    plt.plot(t, y,'r--',label='impuls')
    plt.legend()
    plt.show()

    #3.3
    #A1, B1, C1, D1=signal.tf2ss([1,0],[L,R,1/C])
    #print(A1)


def zad_4():
    m = 1
    L = 0.5
    d = 0.1
    J = (m * L ** 2) / 3
    u = np.ones_like(t)

    def model(x,t):
        tn=0
        dydt =(tn-d*x)/J
        return dydt

    y0 = 10
    t = np.linspace(0,50)
    y = scipy.odeint(model,y0,t)
    plt.plot(t,y,'r--')

    #SAM NA KARCTE OBLICZYŁEM TRANSMITANCJE I ZMIENNE STANU
    G1=scipy.signal.TransferFunction([1],[J,d,0])
    print(G1)

    t, y=scipy.signal.step(G1)
    plt.plot(t, y,'g--')
    plt.show()

    A=np.array([[0,1],[0,-d/J]])
    B=np.array([[0],[1/J]])
    C=np.array([1,0])
    D=0

    G3=scipy.signal.StateSpace(A,B,C,D)
    t, y = scipy.signal.step(G3)
    plt.plot(t, y,'b')

    system = scipy.signal.lti(A, B, C, D)
    tout, y, x = scipy.signal.lsim2(system, u, t)
    plt.plot(t, y,'g--')
    plt.show()


if __name__ == '__main__':


```